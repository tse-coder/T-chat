<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>T-chat | meet and talk</title>
    <link rel="stylesheet" href="./style/style.css">
    <script src="http://localhost:5000/socket.io/socket.io.js"></script> <!--for socket connection-->
    <script src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.10.1/database.js" type="module"></script>
    <script src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1.10.1/picker.js" type="module"></script><!--for emoji picker-->
    <link rel="icon" type="image/svg" href="./images/logo.svg">
</head>

<body>
    <div class="container">
        <div class="nav">
            <div class="left">
                <span></span>
                <img src="./images/logo.svg" alt="logo">
                <p>T-CHAT</p>
                <img onclick=goToMenu() src=<%=user.pp %> alt="user-pp" class="pp">

            </div>
            <div class="right">
                <% if (locals.receiver) { %>
                    <img src=<%=receiver.pp %> alt="" class='pp'>
                    <div class="active-user">
                        <p>
                            <%= receiver.name %>
                        </p>
                        <p class="status">
                            <%= receiver.status %>
                        </p>
                    </div>
                <% } %>
            </div>
        </div>
        <div class="users vertical-scrollbar">
            <% users.forEach(member=> { %>
                <div>
                    <button type="submit" class="user"
                        onclick="join('<%= user.name %>','<%= member.name %>','<%= member.pp %>','<%= member.status %>')">
                        <img src=<%=member.pp %> alt="pp">
                        <div class="user-info">
                            <p class="user-name">
                                <%= member.name %>
                            </p>
                        </div>
                        <span></span>
                    </button>
                </div>
            <% }) %>
        </div>
        <div class="chat-box vertical-scrollbar">
            <% if (locals.receiver) { %>
                <div class="message-box">
                    <img src="./images/emoji.png" alt="emoji">
                    <img src="./images/attach.png" alt="attach">
                    <input type="text" placeholder="message.." name="message" id="message">
                    <button type="submit"
                        onclick="sendMessage('<%= user.name %>' ,'<%= receiver.name %>', document.getElementById('message').value)"><img
                            src="./images/send.png" alt=""></button>
                </div>
            <% } else{ %>
                <script> console.log('no receiver')</script>
            <% } %>
        </div>

    </div>
    <div class="menu-page">
        <form>
            <div class="pic">
                <img src=<%=user.pp %> alt="porfile pic">
                <div class="change-pp">
                    <a href='/changepp?name=<%= user.name %>'>change profile picture</a>
                </div>
                
            </div>

            <input id="username" type="text" value=<%=user.name %> disabled autofocus>
            <p style="color: var(--accent-color);">online</p>
            <a href="/changePassword?user=<%= user.name %>">
                <h3>change passoword</h3>
            </a>
            <h3 onclick='logOut("<%= user.name %>")'>logOut</h3>
            <h3 onclick='deleteAccount("<%= user.name %>")' style="color: #f00;">delete account</h3>
            <svg version="1.1" onclick=exitMenu() class="exit" xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.881px" height="122.88px"
                viewBox="0 0 122.881 122.88" enable-background="new 0 0 122.881 122.88" xml:space="preserve">
                <g>
                    <path
                        d="M61.44,0c16.966,0,32.326,6.877,43.445,17.996c11.119,11.118,17.996,26.479,17.996,43.444 c0,16.967-6.877,32.326-17.996,43.444C93.766,116.003,78.406,122.88,61.44,122.88c-16.966,0-32.326-6.877-43.444-17.996 C6.877,93.766,0,78.406,0,61.439c0-16.965,6.877-32.326,17.996-43.444C29.114,6.877,44.474,0,61.44,0L61.44,0z M80.16,37.369 c1.301-1.302,3.412-1.302,4.713,0c1.301,1.301,1.301,3.411,0,4.713L65.512,61.444l19.361,19.362c1.301,1.301,1.301,3.411,0,4.713 c-1.301,1.301-3.412,1.301-4.713,0L60.798,66.157L41.436,85.52c-1.301,1.301-3.412,1.301-4.713,0c-1.301-1.302-1.301-3.412,0-4.713 l19.363-19.362L36.723,42.082c-1.301-1.302-1.301-3.412,0-4.713c1.301-1.302,3.412-1.302,4.713,0l19.363,19.362L80.16,37.369 L80.16,37.369z M100.172,22.708C90.26,12.796,76.566,6.666,61.44,6.666c-15.126,0-28.819,6.13-38.731,16.042 C12.797,32.62,6.666,46.314,6.666,61.439c0,15.126,6.131,28.82,16.042,38.732c9.912,9.911,23.605,16.042,38.731,16.042 c15.126,0,28.82-6.131,38.732-16.042c9.912-9.912,16.043-23.606,16.043-38.732C116.215,46.314,110.084,32.62,100.172,22.708 L100.172,22.708z" />
                </g>
            </svg>
            <svg version="1.1" onclick=enableEdit() class="edit" id="edit" xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 122.88 102.66"
                style="enable-background:new 0 0 122.88 102.66" xml:space="preserve">
                <style type="text/css">
                    .st0 {
                        fill-rule: evenodd;
                        clip-rule: evenodd;
                    }
                </style>
                <g>
                    <path class="st0"
                        d="M0,0c10.38,7.43,27.02-0.55,33.56,12.4c1.74,3.43,2.11,8.13,0.55,11.86c-0.63,1.5-1.56,2.84-2.82,3.86 c-0.56,0.45-1.18,0.85-1.87,1.19c-8.54,4.24-17.44-1.69-22.16-8.85C2.91,13.87,1.02,5.64,0,0L0,0z M52.65,56.81 c5.78-4.62,10.27-9.93,13.32-16.02l53.72,50.94c2.81,2.66,4.4,4.91,2.04,8.99c-1.17,1.2-2.41,1.84-3.71,1.93 c-1.3,0.09-2.66-0.38-4.09-1.41L52.65,56.81L52.65,56.81z M33.03,34.05c2.5-1.35,5.94-4.66,6.75-8.27l23.29,12.78 c-3.36,6.69-7.64,12.42-13.51,16.48C43.44,46.82,40,41.86,33.03,34.05L33.03,34.05z" />
                </g>
            </svg>
            <svg version="1.1" style="display: none;" onclick='finishEdit("<%= user.name %>")' class="edit" id="finish"
                xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                width="122.881px" height="122.88px" viewBox="0 0 122.881 122.88"
                enable-background="new 0 0 122.881 122.88" xml:space="preserve">
                <g>
                    <path
                        d="M61.44,0c16.966,0,32.326,6.877,43.445,17.995s17.996,26.479,17.996,43.444c0,16.967-6.877,32.327-17.996,43.445 S78.406,122.88,61.44,122.88c-16.966,0-32.326-6.877-43.444-17.995S0,78.406,0,61.439c0-16.965,6.877-32.326,17.996-43.444 S44.474,0,61.44,0L61.44,0z M34.556,67.179c-1.313-1.188-1.415-3.216-0.226-4.529c1.188-1.313,3.216-1.415,4.529-0.227L52.3,74.611 l31.543-33.036c1.223-1.286,3.258-1.336,4.543-0.114c1.285,1.223,1.336,3.257,0.113,4.542L54.793,81.305l-0.004-0.004 c-1.195,1.257-3.182,1.338-4.475,0.168L34.556,67.179L34.556,67.179z M100.33,22.55C90.377,12.598,76.627,6.441,61.44,6.441 c-15.188,0-28.938,6.156-38.89,16.108c-9.953,9.953-16.108,23.702-16.108,38.89c0,15.188,6.156,28.938,16.108,38.891 c9.952,9.952,23.702,16.108,38.89,16.108c15.187,0,28.937-6.156,38.89-16.108c9.953-9.953,16.107-23.702,16.107-38.891 C116.438,46.252,110.283,32.502,100.33,22.55L100.33,22.55z" />
                </g>
            </svg>
        </form>
    </div>
    <script>
        const socket = io("https://localhost:5000", {
            transports: ["websocket", "polling"] // Ensure compatibility
        });

        socket.on("connect", () => {
            console.log("connected")
        })
        const goToMenu = () => {
            document.querySelector(".menu-page").style.display = "grid"
        }
        
        const enableEdit = () => {
            document.getElementById("username").removeAttribute("disabled")
            document.getElementById("finish").style.display = "block"
            document.getElementById("edit").style.display = "none"
        }

        const exitMenu = () => {
            document.querySelector(".menu-page").style.display = "none"
        }
        const finishEdit = async (oldName) => {
            await fetch(`/updateUser`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    oldName: oldName,
                    newName: document.getElementById("username").value
                })
            })
            document.getElementById("finish").style.display = "none"
            document.getElementById("edit").style.display = "block"
            document.getElementById("username").setAttribute("disabled", "true")
        }

        const makeTime = (time) => {
            const date = time == "now" ? new Date : new Date(time);
            let hours = date.getHours();
            let minutes = date.getMinutes();
            let seconds = date.getSeconds();
            hours = hours < 10 ? `0${hours}` : hours;
            minutes = minutes < 10 ? `0${minutes}` : minutes;
            seconds = seconds < 10 ? `0${seconds}` : seconds;
            return `${hours}:${minutes}:${seconds}`;
        }
        let joinedUser;
        let picker;
        let emojiBtn;
        let sendBtn;
        const join = async (sender, receiver, pp, status) => {
            if (joinedUser != receiver) {
                joinedUser = receiver
                const room = [sender, receiver].sort().join("-").replace(/\s/g, "");
                sessionStorage.setItem("room", room);
                socket.emit("joinroom", room);
                console.log(`${sender} joined room ${room}`);

                let friendimg = document.createElement("img");
                friendimg.src = pp
                friendimg.className = "pp"
                let friendbox = document.querySelector(".right")
                let friendname = document.createElement("div")
                friendname.innerHTML = `<p >${receiver}</p>
                                        <p class='status'>${status}</p>`;
                while (friendbox.firstChild) {
                    friendbox.removeChild(friendbox.lastChild)
                }
                friendbox.appendChild(friendimg)
                friendbox.appendChild(friendname)

                let messageBox = document.createElement('div');
                messageBox.className = "message-box";
                messageBox.innerHTML = `<button id="emojiBtn"><img src="./images/emoji.png" id="emoji-btn" alt="emoji"></button>
                                        <emoji-picker id="emojiPicker"></emoji-picker>
                                        <input type="text" placeholder="message.." name="message" id="message">
                                        <button onclick= "sendMessage( '${sender}' ,'${receiver}', document.getElementById('message').value)"><img src="./images/send.png" alt=""></button>`
                document.querySelector(".chat-box").innerHTML = ''
                document.querySelector(".chat-box").appendChild(messageBox);
                let messages = []
                await fetch(`http://localhost:3000/getMessages?sender=${sender}`)
                    .then(async (Response) => {
                        messages = await Response.json()
                    })
                messages.forEach(msg => {

                    const fullTime = makeTime(msg.createdAt);

                    let msgbox = document.createElement("div")
                    msgbox.innerHTML = `<p>${msg.message}</p>
                                        <p class="time">${fullTime}</p>`;
                    if (msg.sender == sender && msg.receiver == receiver) {
                        msgbox.className = "out box";
                        document.querySelector(".chat-box").appendChild(msgbox);
                    } else if (msg.sender == receiver && msg.receiver == sender) {
                        msgbox.className = "in box";
                        document.querySelector(".chat-box").appendChild(msgbox);
                    }  
                })
                picker = document.getElementById("emojiPicker");
                emojiBtn = document.getElementById("emojiBtn");

                emojiBtn.addEventListener("click",()=>{
                    picker.style.display = picker.style.display =="none"?"block":"none";
                })
                picker.addEventListener("emoji-click", (event) => {
                    document.getElementById("message").value += event.detail.unicode;
                });
            }

        }

        socket.on("reply", (message) => {
            let msgbox = document.createElement("div")
            msgbox.className = "in box";
            const fullTime = makeTime('now')
            msgbox.innerHTML = `<p>${message}</p>
                                <p class="time">${fullTime}</p> `;
            document.querySelector(".chat-box").appendChild(msgbox);
        })

        const sendMessage = async (sender, receiver, message) => {
            document.getElementById("emojiPicker").style.display = "none";
            let msgbox = document.createElement("div")
            msgbox.className = "out box";
            const fullTime = makeTime('now')
            msgbox.innerHTML = `<p>${message}</p>
                                 <p class="time">${fullTime}</p>`;
            document.querySelector(".chat-box").appendChild(msgbox);
            const room = [sender, receiver].sort().join("-").replace(/\s/g, "");
            socket.emit("message", message, room)
            document.getElementById('message').value = "";
            await fetch("/addmessage", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    sender: sender,
                    receiver: receiver,
                    message: message,
                })
            })
        }

        const logOut = async (user) => {
            await fetch('/logOut', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    user: user,
                })
            }).then((Response) => {
                if (Response.redirected) {
                    window.location.href = Response.url;
                } else {
                    alert(Response.json.message)
                }
            }).catch(err => console.log(err))
        }
        const deleteAccount = async (user) => {
            if (confirm(`Do you really want to delete your account ?`)) {
                await fetch('/deleteUser', {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        user: user,
                    })
                }).then((Response) => {
                    if (Response.redirected) {
                        window.location.href = Response.url;
                    } else {
                        alert(Response.json.message)
                    }
                }).catch(err => console.log(err))
            }
        }
        const deleteMessage = ()=>{

        }
    </script>
</body>

</html>
